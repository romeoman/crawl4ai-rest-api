---
description:
globs:
alwaysApply: false
---
# Crawl4AI Implementation Patterns

## **Modern LLMExtractionStrategy Usage**
- **DO**: Use `LLMConfig` with modern API
```python
llm_config = LLMConfig(
    provider="openai/gpt-4o-mini",
    api_token=api_key
)
strategy = LLMExtractionStrategy(
    llm_config=llm_config,
    instruction=instruction
)
```

- **DON'T**: Use deprecated provider parameters
```python
# ‚ùå DEPRECATED - causes warnings
strategy = LLMExtractionStrategy(
    provider="openai",
    api_key=api_key,
    model="gpt-4"
)
```

## **AI Provider Configuration Patterns**
- **Support Multiple Provider Formats**:
  - Prefixed: `"openai/gpt-4o-mini"`, `"anthropic/claude-3-sonnet"`
  - Custom models: `"gpt-4.1-nano-2025-04-14"`
  - Auto-detection based on model name patterns

- **Provider Detection Logic**:
```python
if provider.startswith("openai/"):
    model_name = provider.split("/", 1)[1]
    provider_name = "openai"
elif "claude" in provider.lower():
    provider_name = "anthropic"
else:
    provider_name = "openai"  # Default fallback
```

## **AsyncWebCrawler Lifecycle Management**
- **Always use proper context management**:
```python
@asynccontextmanager
async def lifespan(app: FastAPI):
    crawler = AsyncWebCrawler(config=browser_config)
    await crawler.__aenter__()
    try:
        yield
    finally:
        await crawler.__aexit__(None, None, None)
```

- **Configure CrawlerRunConfig properly**:
```python
run_config = CrawlerRunConfig(
    cache_mode=CacheMode.BYPASS,
    extraction_strategy=extraction_strategy,
    chunking_strategy=chunking_strategy,
    css_selector=css_selector or "body"
)
```

## **Extraction Strategy Best Practices**
- **Always provide fallback content**:
```python
# Use extracted_content if AI extraction was used, otherwise use markdown
content = (result.extracted_content 
          if extraction_strategy and result.extracted_content 
          else result.markdown)
```

- **Handle API key validation gracefully**:
```python
api_key = api_token or os.getenv(f"{provider_name.upper()}_API_KEY")
if not api_key:
    raise HTTPException(
        status_code=400,
        detail=f"API key not found for provider {provider_name}"
    )
```

## **Chunking Strategy Patterns**
- **Support multiple chunking strategies**:
```python
def create_chunking_strategy(strategy_name: str):
    if strategy_name == "RegexChunking":
        return RegexChunking()
    elif strategy_name == "NlpSentenceChunking":
        return NlpSentenceChunking()
    else:
        return RegexChunking()  # Default
```

## **Error Handling and Logging**
- **Use structured error responses**:
```python
return CrawlSinglePageResponse(
    success=False,
    error=f"Failed to crawl {url}: {result.error_message}"
)
```

- **Add debug logging for complex operations**:
```python
# Use for debugging complex AI extraction flows
print(f"üîß DEBUG: Creating LLMConfig with provider={provider_name}/{model_name}")
```

## **Metadata Enhancement**
- **Track AI extraction usage in metadata**:
```python
metadata = {
    "extraction_strategy": request.extraction_strategy or "none",
    "ai_extracted": bool(extraction_strategy and result.extracted_content),
    "chunk_number": i + 1,
    "total_chunks": len(chunks)
}
```

## **Environment Configuration**
- **Use environment variables for API keys**:
  - `OPENAI_API_KEY`
  - `ANTHROPIC_API_KEY` 
  - `GOOGLE_API_KEY`
  - `PERPLEXITY_API_KEY`

## **Testing Patterns**
- **Create comprehensive test suites**:
```python
def test_ai_extraction_single():
    """Test single page crawl with AI extraction."""
    response = requests.post(url, json={
        "url": "https://httpbin.org/html",
        "extraction_strategy": "LLMExtractionStrategy",
        "extraction_config": {
            "provider": "gpt-4.1-nano-2025-04-14",
            "instruction": "Extract content"
        }
    })
```

## **File References**
- Main API implementation: [rest_api.py](mdc:src/rest_api.py)
- Test suite: [test_ai_extraction.py](mdc:test_ai_extraction.py)
- API documentation: [POSTMAN_TESTING_GUIDE.md](mdc:POSTMAN_TESTING_GUIDE.md)
